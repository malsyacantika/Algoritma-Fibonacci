#include <iostream>
#include <vector>
#include <chrono>

using namespace std;

unsigned long long fibRecursive(int n) {
    if (n <= 1)
        return n;
    return fibRecursive(n-1) + fibRecursive(n-2);
}

unsigned long long fibDynamic(int n) {
    if (n <= 1)
        return n;
    vector<unsigned long long> fib(n + 1, 0);
    fib[1] = 1;
    for (int i = 2; i <= n; ++i) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib[n];
}

template <typename Func>
double WaktuEksekusi(Func func, int n) {
    auto start = chrono::high_resolution_clock::now(); func(n);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> durasi = end - start;
    return durasi.count();
}

int main() {
    vector<int> N = {10, 25, 30, 40, 50};
    vector<double> WERekursif;
    vector<double> WEDynamic;

    for (int n : N) {
        double waktu = WaktuEksekusi(fibRecursive, n);
        WERekursif.push_back(waktu);

        waktu = WaktuEksekusi(fibDynamic, n);
        WEDynamic.push_back(waktu);
    }

    cout << "N\tWaktu Rekursif (s)\tWaktu Dynamic (s)\n";
    for (size_t i = 0; i < N.size(); ++i) {
        cout << N[i] << "\t" << WERekursif[i] << "\t\t" << WEDynamic[i] << "\n";
    }

    return 0;
}
